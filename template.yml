kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: APP
    required: true
    value: finbif-ipt
  - name: BRANCH
    required: true
  - name: DATA_DIR
    required: true
    value: /srv/ipt
  - name: STORAGE_CLASS
    required: true
    value: standard-csi
  - name: ACCESS_MODE
    required: true
    value: ReadWriteOnce
  - name: APP_PORT
    required: true
    value: "8080"
  - name: API
    required: true
    value: plumber
  - name: API_PORT
    required: true
    value: "8000"
  - name: API_CMD
    required: true
    value: '[
      "sh",
      "-c",
      "Rscript --vanilla init.r"
    ]'
  - name: CRON
    required: true
    value: job
  - name: CRON_SCHEDULE
    required: true
    value: "0 0 * * 0"
  - name: CRON_CMD
    required: true
    value: '[
      "backup.sh"
    ]'
  - name: CRON_LIMIT
    required: true
    value: "7"
  - name: CRON_CONCURRENCY
    required: true
    value: "Forbid"
  - name: LIVENESS_PERIOD
    required: true
    value: "45"
  - name: FAILURE_THRESHOLD
    required: true
    value: "5"
  - name: READINESS_PERIOD
    required: true
    value: "5"
  - name: STORAGE
    required: true
  - name: HOST
    required: true
  - name: RCLONE_ACCESS_KEY_ID
    required: true
  - name: RCLONE_SECRET_ACCESS_KEY
    required: true
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${STORAGE}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  type: Opaque
  data:
    rclone_access_key_id: ${RCLONE_ACCESS_KEY_ID}
    rclone_secret_access_key: ${RCLONE_SECRET_ACCESS_KEY}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
      spec:
        containers:
        - image: ghcr.io/luomus/${APP}:${BRANCH}
          name: ${APP}-${BRANCH}
          ports:
          - containerPort: ${{APP_PORT}}
          volumeMounts:
          - mountPath: ${DATA_DIR}
            name: ${APP}-${BRANCH}
          startupProbe:
            httpGet:
              path: /about.do
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            httpGet:
              path: /about.do
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: /
              port: ${{APP_PORT}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: BRANCH
            value: ${BRANCH}
          - name: HOST
            value: ${HOST}
        - image: ghcr.io/luomus/${APP}:${BRANCH}
          name: ${API}-${BRANCH}
          command: ${{API_CMD}}
          ports:
          - containerPort: ${{API_PORT}}
          volumeMounts:
          - mountPath: ${DATA_DIR}
            name: ${APP}-${BRANCH}
          startupProbe:
            httpGet:
              path: /healthz
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            httpGet:
              path: /healthz
              port: ${{API_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: /healthz
              port: ${{API_PORT}}
            periodSeconds: ${{READINESS_PERIOD}}
        volumes:
        - name: ${APP}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${APP}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${{APP_PORT}}
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${API_PORT}
      port: ${{API_PORT}}
      targetPort: ${{API_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    port:
      targetPort: ${{APP_PORT}}
    tls:
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: ${APP}-${BRANCH}
- kind: CronJob
  apiVersion: batch/v1
  metadata:
    name: ${APP}-${BRANCH}
  spec:
    schedule: ${CRON_SCHEDULE}
    concurrencyPolicy: ${CRON_CONCURRENCY}
    successfulJobsHistoryLimit: ${{CRON_LIMIT}}
    failedJobsHistoryLimit: ${{CRON_LIMIT}}
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP}
          spec:
            containers:
            - name: ${APP}-${BRANCH}
              image: ghcr.io/luomus/${APP}:${BRANCH}
              command: ${{CRON_CMD}}
              env:
              - name: RCLONE_CONFIG_DEFAULT_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: ${APP}-${BRANCH}
                    key: rclone_access_key_id
              - name: RCLONE_CONFIG_DEFAULT_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${APP}-${BRANCH}
                    key: rclone_secret_access_key
              - name: API_HOSTNAME
                value: ${API}-${BRANCH}
              - name: API_PORT
                value: ${API_PORT}
              - name: BRANCH
                value: ${BRANCH}
            restartPolicy: Never
